structs 
postrgres db 

sqlx functions to add returve data 
* sql strings 
** adding data should be simmple (just keep track of if cols are nessisary)
** returving data will need filters. this may be harder (tell ai in proces layse it can use joining and fillterign functions withch will then be defined in the data layer)
*** will need inner + outer join, and where clouse, this call all be generated 
*** may wan enum for where clouse (== vs <= ...) and join (inner vs outer vs left )
*** use string typing to check if bounds of where are ok
*** make new structs (rows) based on the retreving sqlx string (cols will be from Select suchs as * for all, and constrains will be placed on struct based on where clouse)
*** constraints should only be placed on struct if where is not looking for exact match on unequ col but returning

* json the user sends could be subset of struct filds that need to be added to db if some fileds need to be calulated
** you will need input_ struct and db struct (witch you have)




seperate funcitons that interact with db fron funcitons that return data to user 

## test for ai
ai can you ... 

make a pg db to represent farmers and gardeners, a farmer is someone who needs food to feed their lifestock like grass clipings
and a gardernder is someworn who gardens and has things like grass clipings. 
garderners
* type of biomass 
* location 
* has_compost 
* id 

farmerd
* needs_compost 
* location 
* id


can you make rust structs from that 

can you make sqlx functions to retruve and add the structs to the db 

can you make axum endpoints for each sqlx function 

auth



use this for asking ai to make sql 
BOOL, "CHAR", SMALLINT, SMALLSERIAL, INT2, INT, SERIAL, INT4, BIGINT, BIGSERIAL, INT8, REAL, FLOAT4, DOUBLE PRECISION, FLOAT8, VARCHAR, CHAR(N), TEXT, NAME, CITEXT, BYTEA, VOID, INTERVAL, INT8RANGE, INT4RANGE, TSRANGE, TSTZRANGE, DATERANGE, NUMRANGE, MONEY, LTREE, LQUERY, CITEXT1, CUBE, POINT, LINE, LSEG, BOX, PATH, POLYGON, CIRCLE, HSTORE, NUMERIC, TIMESTAMPTZ, TIMESTAMPTZ, TIMESTAMP, DATE, TIME, TIMETZ, UUID, INET, CIDR, INET, CIDR, INET, CIDR, INET, CIDR, MACADDR, BIT, VARBIT, JSON, JSONB, JSON, JSONB, JSON, JSONB
use unequ where nesisary 


